---
plugin: "textParser"
processingTimeout: 600000
markers: []
mappings:
- !<groovyScriptColumn>
  uuid: "a3d5d5ea-bffa-b4f6-6b99-b944422383ea"
  minimized: true
  showHelp: false
  variableName: "holderList1"
  attachEnabled: true
  previewEnabled: true
  cleanerType: "NONE"
  outputDateFormat: "MM/dd/yyyy"
  inputDateFormat: "dd/MM/yyyy"
  script: "// Section Header - \"Major Shareholders\"\n// \"1. Search for the primary\
    \ keyword in the document\n// 2. If keyword exists, then collect all company names\
    \ (refer company legal endings in secondary keywords) within that table\n// 3.\
    \ Collect all company names with legal endings as seperate row\"\n\nstr      \
    \   = ''\nval         = ''\nhList       = []\nholderList  = []\nsecStartRe  =\
    \ 'Major\\\\s*shareholders'\nsecEndRe    = 'major\\\\s*shareholders\\\\s*do\\\\\
    s*not'\n\n// Holding of ordinary shares <-- on 2 lines:\n//                  \
    \                         Holding of excluding shares held \n// Holder       \
    \                         ordinary shares       in treasury BP\nprimary1Re  =\
    \ 'Holding\\\\s*of'\nprimary2Re  = '\\\\s*ordinary\\\\s*shares'\nsecondRe    =\
    \ '(?i)(Inc|Plc|Bank|Ltd|Incorporated)'\nsecMark     = textDocument.find(secStartRe)\n\
    mark        = secMark ? secMark.findNext(primary1Re) : null\nlargeRe     = '\\\
    \\d{2,3},\\\\d{3},\\\\d{3}' // 99,999,999\n// \nif (mark) {\n    startMark   =\
    \ mark.findNext(primary2Re)\n    endMark     = startMark ? startMark.findNext(secEndRe)\
    \ : null\n    if (startMark && endMark) {\n        mark = startMark\n        for\
    \ (i=0;i<20;i++) {\n            \n            hList = getHolder(mark, endMark)\n\
    \            // log.write(hList.join('||'))\n            if (hList[0]) {\n   \
    \             \n                holderList.add([\n                    \"Holder\"\
    \ : hList[1],\n                    \"Amount\" : hList[2]\n                   \
    \ ])\n                log.write('adding ' + holderList.last())\n             \
    \   mark = hList[0]    \n                \n            } else {break;}\n     \
    \   }\n    }\n}\n// New: Changes in Share Capital and Shareholdings of Substantial\
    \ Shareholders -> appears on many pages\n// New: after above, the sentence \"\
    Particulars of shareholdings of the top 10 shareholders\"\n// New: CHANGES IN\
    \ ORDINARY SHARES AND SHAREHOLDINGS OF \n//      SUBSTANTIAL SHAREHOLDERS (CONTINUED)\
    \ \n// after the above, (I)      Shareholdings of Top 10 Ordinary Shareholders\
    \ as at the end of the Reporting Period1 \nnextMark    = null\nfirstMark   = null\n\
    lastMark    = null\nif (! holderList) {\n    // try 20 times\n    firstAnchorRe\
    \   = '(^\\\\s*Changes\\\\s*in\\\\s*Share\\\\s*Capital\\\\s*and\\\\s*Shareholdings\\\
    \\s*of\\\\s*Substantial\\\\s*Shareholders\\\\s*$' +\n                      '|^\\\
    \\s*CHANGES\\\\s*IN\\\\s*ORDINARY\\\\s*SHARES\\\\s*AND\\\\s*SHAREHOLDINGS\\\\\
    s*OF\\\\s*$' +\n                      ')'\n    secondAnchorRe  = '(^\\\\s*(?i)Particulars\\\
    \\s*.*top\\\\s*(10|ten)\\\\s*shareholders\\\\s*' + \n                      '|Shareholdings\\\
    \\s*of\\\\s*Top\\\\s*10\\\\s*Ordinary\\\\s*Shareholders' +\n                 \
    \     ')'\n    firstMark       = textDocument.find(firstAnchorRe)\n    // return\
    \ firstMark\n    if (firstMark) {\n        for (i=0;i<20;i++){\n            nextMark\
    \ = firstMark.findNext(secondAnchorRe)\n            if (nextMark) {\n        \
    \        break\n            } else {\n                firstMark = firstMark.findNext(firstAnchorRe)\n\
    \                if (! firstMark) {\n                    break\n             \
    \   }\n            }\n        }\n    }\n\n    if (firstMark && nextMark) {\n \
    \       lastMark = nextMark.findNext('^\\\\s*Notes:?\\\\s*1?\\\\.?')\n       \
    \ log.write('78 and lastMark is ' + lastMark)\n    }\n    if (firstMark && nextMark\
    \ && lastMark) {\n    \n    // 23,520,968,297\n        moneyRows       = []\n\
    \        \n        largeMoneyRe    = '\\\\s+(\\\\d{1,3},\\\\d{3},\\\\d{3},\\\\\
    d{3})\\\\s+'\n        subDoc          = textDocument.slice(nextMark.index, lastMark.index)\n\
    \        \n        log.write('subDoc is: ' )\n        log.write(subDoc.getChildren().join('\\\
    n'))\n        \n        firstColLength = getFirstColLength(subDoc)\n        log.write('firstColLength:\
    \ ' + firstColLength)\n        // collect all the rows with large money\n    \
    \    moneyRows = subDoc.findAll(largeMoneyRe)\n        moneyRows.each{ m ->\n\
    \            log.write('moneyRow is ' + m)\n            // holder is first column\
    \ separated from second column by at least 3 spaces\n\n            amt = m.value.findAll(largeMoneyRe)[0]\n\
    \            name = m.value.split('\\\\s{3,}')[0].trim()\n\n            // now\
    \ concatenate all the components of the name together. It can be wrapped on \n\
    \            // up to 4 lines\n            name = gatherName(name, m, firstColLength)\n\
    \            holderList.add([\n                \"Holder\" : name,\n          \
    \      \"Amount\" : amt ? amt.trim() : ''\n                ])\n        }\n   \
    \     \n    }\n}\n\nreturn holderList\n\n/*****************************************************/\n\
    // JPMorgan Chase Bank N.A., \n//   depositary for ADSs, through             \
    \                            registered number 102498. The provisions regulating\
    \ the operations \n//   its nominee Guaranty                                 \
    \                of the company, known as its ‘objects’, were historically stated\
    \ in a \n//   Nominees Limited                 5,496,296,263             27.13\
    \     company’s memorandum. The Act abolished the need to have object \n// BlackRock,\
    \ Inc.                     1,531,724,983              7.60     provisions and\
    \ so at the AGM held on 15 April 2010 shareholders \n// The Vanguard Group, Inc\
    \              813,197,253               4.00\n\ndef getHolder(m,end) {\n    //\
    \ log.write('in getHolder with ' + m + ' and ' + end)\n    s  = ''\n    n  = ''\n\
    \n    retList = [null,null,null]\n    \n    sMark = m.findNext(secondRe)\n   \
    \ \n    if (sMark && sMark.index < end.index) {\n        \n        s = sMark.value.trim()\
    \ // remove leading whitespace\n        \n        s = s.split('\\\\s{2,}')[0].trim()\n\
    \        if (s.endsWith(',')) {\n            s = s.take(s.length()-1)\n      \
    \  }\n        // log.write('here at 55: ' + s)\n        \n    }\n    \n    sMark\
    \ = m.findNext(largeRe)\n    \n    if (sMark && sMark.index < end.index) {\n \
    \       \n        n = sMark.value.trim() // remove leading whitespace\n      \
    \  \n        if (n.split('\\\\s{2,}').size()>1){\n            n = n.split('\\\\\
    s{2,}')[1].trim()\n        }\n    }\n    if (s) {\n        retList = []\n    \
    \    retList.add(sMark)\n        retList.add(s)\n        retList.add(n)\n    }\n\
    \    return retList\n}\n\ndef gatherName(n, currentLine, colLength) {\n    go\
    \ = false\n    nextMoneyRow = moneyRows.find{it.index > currentLine.index}\n \
    \   \n    // up to 3 additional lines\n    mark = currentLine.findNext('\\\\S')\n\
    \    compareIndex = mark.index - 1\n    log.write('before loop, compareIndex is\
    \ ' + compareIndex)\n    for (x=0;x<3;x++) {\n        log.write('x is ' + x)\n\
    \        // if not on the last moneyRow, search down to next moneyRow\n      \
    \  // if on the last moneyRow, search until empty\n        go = false\n      \
    \  if (nextMoneyRow) {\n            if (mark && mark.index < nextMoneyRow.index)\
    \ {\n                go = true\n            }\n        } else {\n            go\
    \ = true\n        }\n        log.write('mark.index is ' + mark.index)\n      \
    \  // will not have blank lines in the wrapped name ??\n        if (go && mark.index\
    \ == compareIndex + 1 ) {\n            str = mark.value.take(colLength).trim()\n\
    \            if (str) {\n                n = n + ' ' + str\n                log.write('name\
    \ is now: ' + n)\n            }\n        } else {break}\n        compareIndex\
    \ = mark.index\n        log.write('now compareIndex is ' + compareIndex)\n   \
    \     mark = mark.findNext('\\\\S')\n        if (!mark) {break}\n        \n  \
    \  }\n    return n\n}\n\ndef getFirstColLength(sDoc) {\n    // Name of shareholders(Full\
    \ name)\n    // Name of shareholders\n    mark    = sDoc.find('(?i)Name\\\\s*of\\\
    \\s*shareholders(\\\\(Full\\\\s*name\\\\))?')\n    retLen  = -1\n    if (mark)\
    \ {\n        str     = mark.value\n        orgLen  = str.length()\n        log.write('orgLen:\
    \ ' + orgLen)\n        \n        firstColStrTrimmed = mark.value.trim().split('\\\
    \\s{3,}')[0]\n        firstColStrTrimmed = java.util.regex.Pattern.quote(firstColStrTrimmed)\n\
    \        \n        log.write('firstColStrTrimmed: ***' + firstColStrTrimmed +\
    \ '***')\n        \n        firstColStr = mark.findAndExtract('^\\\\s*(' + firstColStrTrimmed\
    \ + '\\\\s{3,})[A-Za-z]',1)?.value\n        log.write('mark at 215 is ' + mark)\n\
    \        if (firstColStr) {\n            log.write('firstColStr: ***' + firstColStr\
    \ + '***')\n            \n            retLen = orgLen - firstColStr.length()\n\
    \            log.write('retLen: ' + retLen)\n        }        \n\n    }\n    return\
    \ retLen\n}"
  name: "Groovy Script (Column)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to evaluate the value:\n\
    ```\n// Section Header - \"Major Shareholders\"\n// \"1. Search for the primary\
    \ keyword in the document\n// 2. If keyword exists, then collect all company names\
    \ (refer company legal endings in secondary keywords) within that table\n// 3.\
    \ Collect all company names with legal endings as seperate row\"\n\nstr      \
    \   = ''\nval         = ''\nhList       = []\nholderList  = []\nsecStartRe  =\
    \ 'Major\\\\s*shareholders'\nsecEndRe    = 'major\\\\s*shareholders\\\\s*do\\\\\
    s*not'\n\n// Holding of ordinary shares <-- on 2 lines:\n//                  \
    \                         Holding of excluding shares held \n// Holder       \
    \                         ordinary shares       in treasury BP\nprimary1Re  =\
    \ 'Holding\\\\s*of'\nprimary2Re  = '\\\\s*ordinary\\\\s*shares'\nsecondRe    =\
    \ '(?i)(Inc|Plc|Bank|Ltd|Incorporated)'\nsecMark     = textDocument.find(secStartRe)\n\
    mark        = secMark ? secMark.findNext(primary1Re) : null\nlargeRe     = '\\\
    \\d{2,3},\\\\d{3},\\\\d{3}' // 99,999,999\n// \nif (mark) {\n    startMark   =\
    \ mark.findNext(primary2Re)\n    endMark     = startMark ? startMark.findNext(secEndRe)\
    \ : null\n    if (startMark && endMark) {\n        mark = startMark\n        for\
    \ (i=0;i<20;i++) {\n            \n            hList = getHolder(mark, endMark)\n\
    \            // log.write(hList.join('||'))\n            if (hList[0]) {\n   \
    \             \n                holderList.add([\n                    \"Holder\"\
    \ : hList[1],\n                    \"Amount\" : hList[2]\n                   \
    \ ])\n                log.write('adding ' + holderList.last())\n             \
    \   mark = hList[0]    \n                \n            } else {break;}\n     \
    \   }\n    }\n}\n// New: Changes in Share Capital and Shareholdings of Substantial\
    \ Shareholders -> appears on many pages\n// New: after above, the sentence \"\
    Particulars of shareholdings of the top 10 shareholders\"\n// New: CHANGES IN\
    \ ORDINARY SHARES AND SHAREHOLDINGS OF \n//      SUBSTANTIAL SHAREHOLDERS (CONTINUED)\
    \ \n// after the above, (I)      Shareholdings of Top 10 Ordinary Shareholders\
    \ as at the end of the Reporting Period1 \nnextMark    = null\nfirstMark   = null\n\
    lastMark    = null\nif (! holderList) {\n    // try 20 times\n    firstAnchorRe\
    \   = '(^\\\\s*Changes\\\\s*in\\\\s*Share\\\\s*Capital\\\\s*and\\\\s*Shareholdings\\\
    \\s*of\\\\s*Substantial\\\\s*Shareholders\\\\s*$' +\n                      '|^\\\
    \\s*CHANGES\\\\s*IN\\\\s*ORDINARY\\\\s*SHARES\\\\s*AND\\\\s*SHAREHOLDINGS\\\\\
    s*OF\\\\s*$' +\n                      ')'\n    secondAnchorRe  = '(^\\\\s*(?i)Particulars\\\
    \\s*.*top\\\\s*(10|ten)\\\\s*shareholders\\\\s*' + \n                      '|Shareholdings\\\
    \\s*of\\\\s*Top\\\\s*10\\\\s*Ordinary\\\\s*Shareholders' +\n                 \
    \     ')'\n    firstMark       = textDocument.find(firstAnchorRe)\n    // return\
    \ firstMark\n    if (firstMark) {\n        for (i=0;i<20;i++){\n            nextMark\
    \ = firstMark.findNext(secondAnchorRe)\n            if (nextMark) {\n        \
    \        break\n            } else {\n                firstMark = firstMark.findNext(firstAnchorRe)\n\
    \                if (! firstMark) {\n                    break\n             \
    \   }\n            }\n        }\n    }\n\n    if (firstMark && nextMark) {\n \
    \       lastMark = nextMark.findNext('^\\\\s*Notes:?\\\\s*1?\\\\.?')\n       \
    \ log.write('78 and lastMark is ' + lastMark)\n    }\n    if (firstMark && nextMark\
    \ && lastMark) {\n    \n    // 23,520,968,297\n        moneyRows       = []\n\
    \        \n        largeMoneyRe    = '\\\\s+(\\\\d{1,3},\\\\d{3},\\\\d{3},\\\\\
    d{3})\\\\s+'\n        subDoc          = textDocument.slice(nextMark.index, lastMark.index)\n\
    \        \n        log.write('subDoc is: ' )\n        log.write(subDoc.getChildren().join('\\\
    n'))\n        \n        firstColLength = getFirstColLength(subDoc)\n        log.write('firstColLength:\
    \ ' + firstColLength)\n        // collect all the rows with large money\n    \
    \    moneyRows = subDoc.findAll(largeMoneyRe)\n        moneyRows.each{ m ->\n\
    \            log.write('moneyRow is ' + m)\n            // holder is first column\
    \ separated from second column by at least 3 spaces\n\n            amt = m.value.findAll(largeMoneyRe)[0]\n\
    \            name = m.value.split('\\\\s{3,}')[0].trim()\n\n            // now\
    \ concatenate all the components of the name together. It can be wrapped on \n\
    \            // up to 4 lines\n            name = gatherName(name, m, firstColLength)\n\
    \            holderList.add([\n                \"Holder\" : name,\n          \
    \      \"Amount\" : amt ? amt.trim() : ''\n                ])\n        }\n   \
    \     \n    }\n}\n\nreturn holderList\n\n/*****************************************************/\n\
    // JPMorgan Chase Bank N.A., \n//   depositary for ADSs, through             \
    \                            registered number 102498. The provisions regulating\
    \ the operations \n//   its nominee Guaranty                                 \
    \                of the company, known as its ‘objects’, were historically stated\
    \ in a \n//   Nominees Limited                 5,496,296,263             27.13\
    \     company’s memorandum. The Act abolished the need to have object \n// BlackRock,\
    \ Inc.                     1,531,724,983              7.60     provisions and\
    \ so at the AGM held on 15 April 2010 shareholders \n// The Vanguard Group, Inc\
    \              813,197,253               4.00\n\ndef getHolder(m,end) {\n    //\
    \ log.write('in getHolder with ' + m + ' and ' + end)\n    s  = ''\n    n  = ''\n\
    \n    retList = [null,null,null]\n    \n    sMark = m.findNext(secondRe)\n   \
    \ \n    if (sMark && sMark.index < end.index) {\n        \n        s = sMark.value.trim()\
    \ // remove leading whitespace\n        \n        s = s.split('\\\\s{2,}')[0].trim()\n\
    \        if (s.endsWith(',')) {\n            s = s.take(s.length()-1)\n      \
    \  }\n        // log.write('here at 55: ' + s)\n        \n    }\n    \n    sMark\
    \ = m.findNext(largeRe)\n    \n    if (sMark && sMark.index < end.index) {\n \
    \       \n        n = sMark.value.trim() // remove leading whitespace\n      \
    \  \n        if (n.split('\\\\s{2,}').size()>1){\n            n = n.split('\\\\\
    s{2,}')[1].trim()\n        }\n    }\n    if (s) {\n        retList = []\n    \
    \    retList.add(sMark)\n        retList.add(s)\n        retList.add(n)\n    }\n\
    \    return retList\n}\n\ndef gatherName(n, currentLine, colLength) {\n    go\
    \ = false\n    nextMoneyRow = moneyRows.find{it.index > currentLine.index}\n \
    \   \n    // up to 3 additional lines\n    mark = currentLine.findNext('\\\\S')\n\
    \    compareIndex = mark.index - 1\n    log.write('before loop, compareIndex is\
    \ ' + compareIndex)\n    for (x=0;x<3;x++) {\n        log.write('x is ' + x)\n\
    \        // if not on the last moneyRow, search down to next moneyRow\n      \
    \  // if on the last moneyRow, search until empty\n        go = false\n      \
    \  if (nextMoneyRow) {\n            if (mark && mark.index < nextMoneyRow.index)\
    \ {\n                go = true\n            }\n        } else {\n            go\
    \ = true\n        }\n        log.write('mark.index is ' + mark.index)\n      \
    \  // will not have blank lines in the wrapped name ??\n        if (go && mark.index\
    \ == compareIndex + 1 ) {\n            str = mark.value.take(colLength).trim()\n\
    \            if (str) {\n                n = n + ' ' + str\n                log.write('name\
    \ is now: ' + n)\n            }\n        } else {break}\n        compareIndex\
    \ = mark.index\n        log.write('now compareIndex is ' + compareIndex)\n   \
    \     mark = mark.findNext('\\\\S')\n        if (!mark) {break}\n        \n  \
    \  }\n    return n\n}\n\ndef getFirstColLength(sDoc) {\n    // Name of shareholders(Full\
    \ name)\n    // Name of shareholders\n    mark    = sDoc.find('(?i)Name\\\\s*of\\\
    \\s*shareholders(\\\\(Full\\\\s*name\\\\))?')\n    retLen  = -1\n    if (mark)\
    \ {\n        str     = mark.value\n        orgLen  = str.length()\n        log.write('orgLen:\
    \ ' + orgLen)\n        \n        firstColStrTrimmed = mark.value.trim().split('\\\
    \\s{3,}')[0]\n        firstColStrTrimmed = java.util.regex.Pattern.quote(firstColStrTrimmed)\n\
    \        \n        log.write('firstColStrTrimmed: ***' + firstColStrTrimmed +\
    \ '***')\n        \n        firstColStr = mark.findAndExtract('^\\\\s*(' + firstColStrTrimmed\
    \ + '\\\\s{3,})[A-Za-z]',1)?.value\n        log.write('mark at 215 is ' + mark)\n\
    \        if (firstColStr) {\n            log.write('firstColStr: ***' + firstColStr\
    \ + '***')\n            \n            retLen = orgLen - firstColStr.length()\n\
    \            log.write('retLen: ' + retLen)\n        }        \n\n    }\n    return\
    \ retLen\n}\n```\n"
  implementation: "groovyScriptColumn"
  plugin: "groovy"
  uiContribution: "groovyScriptColumn-mapping-settings"
  mappingType: "COLUMN"
- !<groovyScriptColumn>
  uuid: "d779802f-540b-69f2-6038-dff0efd04b1c"
  minimized: true
  showHelp: false
  variableName: "holderList2"
  attachEnabled: true
  previewEnabled: false
  cleanerType: "NONE"
  outputDateFormat: "MM/dd/yyyy"
  inputDateFormat: "dd/MM/yyyy"
  script: "if (holderList1) {\n    return []\n}\nholderList = []\n/*\nINTEREST OF\
    \ SUBSTANTIAL SHAREHOLDERS (LONG POSITION) \n \nTo the knowledge of the Company,\
    \ as at 31 December 2019, the following persons, other than a Director or chief\
    \ executive of the \nCompany, had an interest of 5% or more in the Shares or underlying\
    \ Shares of the Company as recorded in the register required to \nbe kept by the\
    \ Company under section 336 of the SFO: \n \n \n                             \
    \                                                                            \
    \           Approximate percentage of \n Name of shareholder                 \
    \              Nature of interest/Capacity              Number of Shares     \
    \        interest in the Company3 \n */\nlargeMoneyRe    = '\\\\s+(\\\\d{1,3},\\\
    \\d{3},\\\\d{3},\\\\d{3})\\\\s+'\nmark            = textDocument.find('(?i)INTEREST\\\
    \\s*OF\\\\s*SUBSTANTIAL\\\\s*SHAREHOLDERS')\nif (mark) {\n    mark = mark.findNext('(?i)Name\\\
    \\s*of\\\\s*shareholder')\n}\nif (mark){\n//  find the next occurrence of 3 blank\
    \ lines\n    endIndex = find3BlankLines(mark)\n    if (endIndex > 0) {\n     \
    \   subDoc = textDocument.slice(mark.index, endIndex + 1)\n        log.write('subDoc\
    \ in holderList2: ' + subDoc.getChildren().join('\\n'))\n        subDoc.getChildren().each{it\
    \ ->\n            if (it.value =~ largeMoneyRe) {\n                log.write('it:\
    \ ' + it)\n                holderList.add([\n                \"Holder\" : it.value.split('\\\
    \\s{3,}')[0].trim(),\n                \"Amount\" : it.findAndExtract(largeMoneyRe,1).value\n\
    \                ])\n\n            }\n        }\n    }\n    \n}\nreturn holderList\
    \ \n /**************************************************************/\n def find3BlankLines(m)\
    \ {\n    blankRe     = '^\\\\s*$'\n    retIndex    = -1\n    \n    start   = m\n\
    \    m = m.findNext(blankRe)\n    for (x=0;x<30;x++) {\n        if (textDocument.slice(m.index,\
    \ m.index + 3).value.trim()) {\n            m = m.findNext(blankRe)\n        }\
    \ else {\n            retIndex = m.index\n            break;\n        }\n    \
    \        \n    }\n    return retIndex\n}"
  name: "Groovy Script (Column)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to evaluate the value:\n\
    ```\nif (holderList1) {\n    return []\n}\nholderList = []\n/*\nINTEREST OF SUBSTANTIAL\
    \ SHAREHOLDERS (LONG POSITION) \n \nTo the knowledge of the Company, as at 31\
    \ December 2019, the following persons, other than a Director or chief executive\
    \ of the \nCompany, had an interest of 5% or more in the Shares or underlying\
    \ Shares of the Company as recorded in the register required to \nbe kept by the\
    \ Company under section 336 of the SFO: \n \n \n                             \
    \                                                                            \
    \           Approximate percentage of \n Name of shareholder                 \
    \              Nature of interest/Capacity              Number of Shares     \
    \        interest in the Company3 \n */\nlargeMoneyRe    = '\\\\s+(\\\\d{1,3},\\\
    \\d{3},\\\\d{3},\\\\d{3})\\\\s+'\nmark            = textDocument.find('(?i)INTEREST\\\
    \\s*OF\\\\s*SUBSTANTIAL\\\\s*SHAREHOLDERS')\nif (mark) {\n    mark = mark.findNext('(?i)Name\\\
    \\s*of\\\\s*shareholder')\n}\nif (mark){\n//  find the next occurrence of 3 blank\
    \ lines\n    endIndex = find3BlankLines(mark)\n    if (endIndex > 0) {\n     \
    \   subDoc = textDocument.slice(mark.index, endIndex + 1)\n        log.write('subDoc\
    \ in holderList2: ' + subDoc.getChildren().join('\\n'))\n        subDoc.getChildren().each{it\
    \ ->\n            if (it.value =~ largeMoneyRe) {\n                log.write('it:\
    \ ' + it)\n                holderList.add([\n                \"Holder\" : it.value.split('\\\
    \\s{3,}')[0].trim(),\n                \"Amount\" : it.findAndExtract(largeMoneyRe,1).value\n\
    \                ])\n\n            }\n        }\n    }\n    \n}\nreturn holderList\
    \ \n /**************************************************************/\n def find3BlankLines(m)\
    \ {\n    blankRe     = '^\\\\s*$'\n    retIndex    = -1\n    \n    start   = m\n\
    \    m = m.findNext(blankRe)\n    for (x=0;x<30;x++) {\n        if (textDocument.slice(m.index,\
    \ m.index + 3).value.trim()) {\n            m = m.findNext(blankRe)\n        }\
    \ else {\n            retIndex = m.index\n            break;\n        }\n    \
    \        \n    }\n    return retIndex\n}\n```\n"
  implementation: "groovyScriptColumn"
  plugin: "groovy"
  uiContribution: "groovyScriptColumn-mapping-settings"
  mappingType: "COLUMN"
- !<groovyScriptColumn>
  uuid: "1dd64069-cbf9-706f-d872-76431d59e82c"
  minimized: true
  showHelp: false
  variableName: "varCompany"
  attachEnabled: false
  previewEnabled: false
  cleanerType: "NONE"
  outputDateFormat: "MM/dd/yyyy"
  inputDateFormat: "dd/MM/yyyy"
  script: "return"
  name: "Groovy Script (Column)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to evaluate the value:\n\
    ```\nreturn\n```\n"
  implementation: "groovyScriptColumn"
  plugin: "groovy"
  uiContribution: "groovyScriptColumn-mapping-settings"
  mappingType: "COLUMN"
- !<groovyScriptColumn>
  uuid: "1250dae5-5d40-bc3b-58ae-35762c03c38f"
  minimized: true
  showHelp: false
  variableName: "makeRows"
  attachEnabled: true
  previewEnabled: false
  cleanerType: "NONE"
  outputDateFormat: "MM/dd/yyyy"
  inputDateFormat: "dd/MM/yyyy"
  script: "row = holderList1\nif (!row) {\n    row = holderList2\n}\nreturnRow = []\n\
    row.each{it ->\n    returnRow.add([\n        \"Filename\"      : document.filename,\n\
    \        // \"Company\"       : varCompany,\n        \"Shareholder\"   : it.Holder,\n\
    \        \"Amount\"        : it.Amount\n        ])\n    log.write('added returnRow:\
    \ ' + returnRow.last())\n}\nif (! returnRow) {\n    returnRow.add([\n        \n\
    \        \"Filename\"      : document.filename,\n        // \"Company\"      \
    \ : varCompany,\n        \"Shareholder\"   : '',\n        \"Amount\"        :\
    \ ''\n        ])\n    log.write('added returnRow: ' + returnRow.last())\n}\nreturn\
    \ returnRow"
  name: "Groovy Script (Column)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to evaluate the value:\n\
    ```\nrow = holderList1\nif (!row) {\n    row = holderList2\n}\nreturnRow = []\n\
    row.each{it ->\n    returnRow.add([\n        \"Filename\"      : document.filename,\n\
    \        // \"Company\"       : varCompany,\n        \"Shareholder\"   : it.Holder,\n\
    \        \"Amount\"        : it.Amount\n        ])\n    log.write('added returnRow:\
    \ ' + returnRow.last())\n}\nif (! returnRow) {\n    returnRow.add([\n        \n\
    \        \"Filename\"      : document.filename,\n        // \"Company\"      \
    \ : varCompany,\n        \"Shareholder\"   : '',\n        \"Amount\"        :\
    \ ''\n        ])\n    log.write('added returnRow: ' + returnRow.last())\n}\nreturn\
    \ returnRow\n```\n"
  implementation: "groovyScriptColumn"
  plugin: "groovy"
  uiContribution: "groovyScriptColumn-mapping-settings"
  mappingType: "COLUMN"
- !<groovyScriptDataset>
  uuid: "2366d926-93be-c31f-cd33-783843be6502"
  minimized: true
  showHelp: false
  datasetName: "MajorShareholders"
  attachEnabled: true
  previewEnabled: false
  script: "row = []\nif (makeRows) {\n    return makeRows\n}\nreturn row"
  name: "Groovy Script (Row)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to create the rows:\n```\n\
    row = []\nif (makeRows) {\n    return makeRows\n}\nreturn row\n```\n"
  implementation: "groovyScriptDataset"
  plugin: "groovy"
  mappingType: "DATASET"
  uiContribution: "groovyScriptDataset-mapping-settings"
documentSets:
- enabled: true
  name: "MSCIBatchesDocSet"
helpers: []
schemaVersion: 1
datasetMappings:
- !<groovyScriptDataset>
  uuid: "2366d926-93be-c31f-cd33-783843be6502"
  minimized: true
  showHelp: false
  datasetName: "MajorShareholders"
  attachEnabled: true
  previewEnabled: false
  script: "row = []\nif (makeRows) {\n    return makeRows\n}\nreturn row"
  name: "Groovy Script (Row)"
  grouping: "Scripting"
  documentationMarkdown: "Use the following groovy script to create the rows:\n```\n\
    row = []\nif (makeRows) {\n    return makeRows\n}\nreturn row\n```\n"
  implementation: "groovyScriptDataset"
  plugin: "groovy"
  mappingType: "DATASET"
  uiContribution: "groovyScriptDataset-mapping-settings"
